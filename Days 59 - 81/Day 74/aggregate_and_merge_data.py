"""
Aggregate and Merge Data with Pandas
Automatically generated by Colab.
# Introduction
Today we'll dive deep into a dataset all about LEGO. From the dataset we can ask whole bunch of interesting questions about the history of the LEGO company, their product offering, and which LEGO set ultimately rules them all:
[Rebrickable](https://rebrickable.com/downloads/) has compiled data on all the LEGO pieces in existence. I recommend you use download the .csv files provided in this lesson.
"""

import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv("colors.csv")
df = pd.DataFrame(data)
df.head()

df["name"].nunique()

df.groupby('is_trans').count()

df.is_trans.value_counts()

sets_data = pd.read_csv("sets.csv")
sets = pd.DataFrame(sets_data)
sets.head()

"""**Challenge**: In which year were the first LEGO sets released and what were these sets called?"""

year_1 = sets.sort_values('year', ascending=True)
sets[sets['year'] == 1949]

"""**Challenge**: How many different sets did LEGO sell in their first year? How many types of LEGO products were on offer in the year the company started?"""

year_1.head(5)["theme_id"].nunique()

"""**Challenge**: Find the top 5 LEGO sets with the most number of parts."""

parts = sets.sort_values('num_parts', ascending=False)
parts.head()

"""**Challenge**: Show the number of LEGO sets released year-on-year. How do the number of sets released in 1955 compare to the number of sets released in 2019?"""

sets_by_year = sets.groupby('year').count()
sets_by_year["set_num"].head()

"""**Challenge**: Show the number of LEGO releases on a line chart using Matplotlib. """

plt.plot(sets_by_year.index[:-2], sets_by_year.set_num[:-2])

"""Let's work out the number of different themes shipped by year. This means we have to count the number of unique theme_ids per calendar year."""

themes_by_year = sets.groupby('year').agg({'theme_id': pd.Series.nunique})
themes_by_year.head()

themes_by_year.rename(columns={'theme_id': 'nr_themes'}, inplace=True)
themes_by_year.head()

"""**Challenge**: Plot the number of themes released by year on a line chart. Only include the full calendar years (i.e., exclude 2020 and 2021)."""

plt.plot(themes_by_year.index[:-2], themes_by_year.nr_themes[:-2])

"""Line Charts with Two Seperate Axes"""

ax1 = plt.gca()  # get current axes
ax2 = ax1.twinx()

ax1.plot(sets_by_year.index[:-2], sets_by_year.set_num[:-2], "g")
ax2.plot(themes_by_year.index[:-2], themes_by_year.nr_themes[:-2], "b")

ax1.set_xlabel('Year')
ax1.set_ylabel('Number of sets', color='g')
ax2.set_ylabel('Number of themes', color='b')

"""**Challenge**: Figure out the average number of parts per set. How many parts did the average LEGO set released in 1954 compared to say, 2017?"""

parts_per_set = sets.groupby('year').agg({'num_parts': pd.Series.mean})
parts_per_set.head()

"""Scatter Plots in Matplotlib
**Challenge**: Has the size and complexity of LEGO sets increased over time based on the number of parts? Plot the average number of parts over time using a Matplotlib scatter plot. See if you can use the [scatter plot documentation](https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.scatter.html) before I show you the solution. Do you spot a trend in the chart?
"""

plt.scatter(parts_per_set.index[:-2], parts_per_set.num_parts[:-2])

"""Number of Sets per LEGO Theme
LEGO has licensed many hit franchises from Harry Potter to Marvel Super Heros to many others. But which theme has the largest number of individual sets?
"""

set_theme_count = sets['theme_id'].value_counts()
set_theme_count.head()

"""Database Schemas, Foreign Keys and Merging DataFrames
The themes.csv file has the actual theme names.
**Challenge**: Explore the themes.csv. How is it structured? Search for the name 'Star Wars'. How many correspond to this name in the themes.csv? Now find the corresponding the sets in the sets.csv """

themes_data = pd.read_csv("themes.csv")
themes = pd.DataFrame(themes_data)
themes.head()

themes[themes['name'] == 'Star Wars']

sets[sets['theme_id'] == 18]

"""Merging (i.e., Combining) DataFrames based on a Key"""

set_theme_count = pd.DataFrame({'id': set_theme_count.index, 'set_count': set_theme_count.values})
set_theme_count.head()

merged_df = pd.merge(set_theme_count, themes, on='id')
merged_df.head()

plt.figure(figsize=(14, 8))
plt.xticks(fontsize=14, rotation=45)
plt.yticks(fontsize=14)
plt.ylabel('Nr of Sets', fontsize=14)
plt.xlabel('Theme Name', fontsize=14)

plt.bar(merged_df.name[:10], merged_df.set_count[:10])
